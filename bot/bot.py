import logging
import telebot
from telebot import types
from config import TOKEN
from logic import connect_db, get_dishes, get_recipe

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)

def get_cuisines():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ö–æ–Ω—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = connect_db()
    cursor = conn.cursor()
    
    cursor.execute('SELECT name FROM countries')
    cuisines = [row[0] for row in cursor.fetchall()]
    
    conn.close()
    return cuisines

@bot.message_handler(commands=['start'])
def start(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫—É—Ö–Ω—è–º–∏."""
    cuisines = get_cuisines()   
    keyboard = types.InlineKeyboardMarkup()

    for country in cuisines:
        keyboard.add(types.InlineKeyboardButton(text=country, callback_data=country))

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é:', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ö–Ω–∏ –∏ –±–ª—é–¥–∞."""
    data = call.data.split('|')
    conn = None 
    try:
        if len(data) == 1:  
            country = data[0]
            conn = connect_db()
            cursor = conn.cursor()

            cursor.execute('SELECT id FROM countries WHERE name = ?', (country.strip(),))
            country_row = cursor.fetchone()

            if country_row:
                bot.answer_callback_query(call.id)
                bot.edit_message_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ {country}:", chat_id=call.message.chat.id, message_id=call.message.message_id)

                dishes = get_dishes(country)
                keyboard = types.InlineKeyboardMarkup()

                for dish, image_path in dishes: 
                    keyboard.add(types.InlineKeyboardButton(text=dish, callback_data=f"{country}|{dish}"))
                 
                    history_url = f"https://ru.wikipedia.org/wiki/{dish.replace(' ', '_')}"
                    keyboard.add(types.InlineKeyboardButton(text=f"–£–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–ª—é–¥–∞ üîç", url=history_url))

                bot.send_message(call.message.chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ {country}:", reply_markup=keyboard)
            else:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ö—É—Ö–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else: 
            country = data[0]
            dish = data[1]
            recipe, image_path = get_recipe(country, dish) 
            bot.edit_message_text(text=f"–†–µ—Ü–µ–ø—Ç –¥–ª—è {dish}:\n{recipe}", chat_id=call.message.chat.id, message_id=call.message.message_id)
            
            if image_path:  
                with open(image_path, 'rb') as img:
                    bot.send_photo(call.message.chat.id, img, caption=f"–í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {dish}")

    except Exception as e:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        logger.error(f"–û—à–∏–±–∫–∞: {e}")  
    finally:
        if conn:
            conn.close() 

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    bot.polling(none_stop=True)

if __name__ == "__main__":
    main()
